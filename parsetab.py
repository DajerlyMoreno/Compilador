
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programDIVIDE EQUALS ID LPAREN MINUS NUMBER PLUS RPAREN SEMICOLON TIMESprogram : program statementprogram : statementstatement : ID EQUALS expression SEMICOLONstatement : expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID'
    
_lr_action_items = {'ID':([0,1,2,5,7,8,9,10,11,12,13,22,],[3,3,-2,15,-1,15,-4,15,15,15,15,-3,]),'LPAREN':([0,1,2,5,7,8,9,10,11,12,13,22,],[5,5,-2,5,-1,5,-4,5,5,5,5,-3,]),'NUMBER':([0,1,2,5,7,8,9,10,11,12,13,22,],[6,6,-2,6,-1,6,-4,6,6,6,6,-3,]),'$end':([1,2,7,9,22,],[0,-2,-1,-4,-3,]),'EQUALS':([3,],[8,]),'SEMICOLON':([3,4,6,15,16,17,18,19,20,21,],[-11,9,-10,-11,22,-5,-6,-7,-8,-9,]),'PLUS':([3,4,6,14,15,16,17,18,19,20,21,],[-11,10,-10,10,-11,10,10,10,10,10,-9,]),'MINUS':([3,4,6,14,15,16,17,18,19,20,21,],[-11,11,-10,11,-11,11,11,11,11,11,-9,]),'TIMES':([3,4,6,14,15,16,17,18,19,20,21,],[-11,12,-10,12,-11,12,12,12,12,12,-9,]),'DIVIDE':([3,4,6,14,15,16,17,18,19,20,21,],[-11,13,-10,13,-11,13,13,13,13,13,-9,]),'RPAREN':([6,14,15,17,18,19,20,21,],[-10,21,-11,-5,-6,-7,-8,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,7,]),'expression':([0,1,5,8,10,11,12,13,],[4,4,14,16,17,18,19,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program_multiple','octave_parser.py',8),
  ('program -> statement','program',1,'p_program_single','octave_parser.py',15),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','octave_parser.py',20),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','octave_parser.py',25),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','octave_parser.py',31),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','octave_parser.py',32),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','octave_parser.py',33),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','octave_parser.py',34),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','octave_parser.py',38),
  ('expression -> NUMBER','expression',1,'p_expression_number','octave_parser.py',42),
  ('expression -> ID','expression',1,'p_expression_id','octave_parser.py',46),
]
