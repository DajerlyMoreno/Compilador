
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND CADENA COMMA DISP DIVIDE DOSPUNTOS DOUBLE_EQUALS DQUOTE END EQUALS FALSE FOR GREATER GREATER_EQUALS ID IF LESS LESS_EQUALS LPAREN MINUS NOT NULL NUMBER OR PLUS RPAREN SEMICOLON SQUOTE TIMES TRUE WHILEprogram : statement_liststatement_list : statement_list statementstatement_list : statementstatement : IF expression statement ENDstatement : FOR ID EQUALS expression DOSPUNTOS expression statement_list ENDstatement : WHILE expression statement_list ENDstatement : DISP LPAREN expression RPAREN SEMICOLONstatement : ID EQUALS expression SEMICOLONstatement : expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GREATER expression\n                  | expression LESS expression\n                  | expression DOUBLE_EQUALS expression\n                  | expression GREATER_EQUALS expression\n                  | expression LESS_EQUALS expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression DOSPUNTOS expressionexpression : CADENAexpression : NOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID'
    
_lr_action_items = {'IF':([0,2,3,11,13,14,15,16,17,32,35,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,60,61,62,63,],[4,4,-3,-22,-25,-2,4,-26,-9,4,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,4,-24,-4,-8,-6,-7,4,4,-5,]),'FOR':([0,2,3,11,13,14,15,16,17,32,35,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,60,61,62,63,],[6,6,-3,-22,-25,-2,6,-26,-9,6,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,6,-24,-4,-8,-6,-7,6,6,-5,]),'WHILE':([0,2,3,11,13,14,15,16,17,32,35,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,60,61,62,63,],[8,8,-3,-22,-25,-2,8,-26,-9,8,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,8,-24,-4,-8,-6,-7,8,8,-5,]),'DISP':([0,2,3,11,13,14,15,16,17,32,35,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,60,61,62,63,],[9,9,-3,-22,-25,-2,9,-26,-9,9,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,9,-24,-4,-8,-6,-7,9,9,-5,]),'ID':([0,2,3,4,6,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,56,57,59,60,61,62,63,],[7,7,-3,16,30,16,16,-22,16,-25,-2,7,-26,-9,16,16,16,16,16,16,16,16,16,16,16,16,16,7,16,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,16,7,-24,-4,-8,-6,16,-7,7,7,-5,]),'CADENA':([0,2,3,4,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,56,57,59,60,61,62,63,],[11,11,-3,11,11,11,-22,11,-25,-2,11,-26,-9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,11,11,-24,-4,-8,-6,11,-7,11,11,-5,]),'NOT':([0,2,3,4,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,56,57,59,60,61,62,63,],[12,12,-3,12,12,12,-22,12,-25,-2,12,-26,-9,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,12,12,-24,-4,-8,-6,12,-7,12,12,-5,]),'LPAREN':([0,2,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,56,57,59,60,61,62,63,],[10,10,-3,10,10,33,10,-22,10,-25,-2,10,-26,-9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,10,10,-24,-4,-8,-6,10,-7,10,10,-5,]),'NUMBER':([0,2,3,4,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,56,57,59,60,61,62,63,],[13,13,-3,13,13,13,-22,13,-25,-2,13,-26,-9,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,13,13,-24,-4,-8,-6,13,-7,13,13,-5,]),'$end':([1,2,3,14,17,54,56,57,60,63,],[0,-1,-3,-2,-9,-4,-8,-6,-7,-5,]),'END':([3,14,17,36,51,54,56,57,60,62,63,],[-3,-2,-9,54,57,-4,-8,-6,-7,63,-5,]),'SEMICOLON':([5,7,11,13,16,35,37,38,39,40,41,42,43,44,45,46,47,48,50,53,58,],[17,-26,-22,-25,-26,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,56,-24,60,]),'PLUS':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[18,-26,-22,-25,18,-26,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-24,18,18,]),'MINUS':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[19,-26,-22,-25,19,-26,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-24,19,19,]),'TIMES':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[20,-26,-22,-25,20,-26,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-24,20,20,]),'DIVIDE':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[21,-26,-22,-25,21,-26,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-24,21,21,]),'GREATER':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[22,-26,-22,-25,22,-26,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-24,22,22,]),'LESS':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[23,-26,-22,-25,23,-26,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-24,23,23,]),'DOUBLE_EQUALS':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[24,-26,-22,-25,24,-26,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-24,24,24,]),'GREATER_EQUALS':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[25,-26,-22,-25,25,-26,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-24,25,25,]),'LESS_EQUALS':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[26,-26,-22,-25,26,-26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-24,26,26,]),'AND':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[27,-26,-22,-25,27,-26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-24,27,27,]),'OR':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[28,-26,-22,-25,28,-26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-24,28,28,]),'DOSPUNTOS':([5,7,11,13,15,16,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,55,61,],[29,-26,-22,-25,29,-26,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-24,59,29,]),'EQUALS':([7,30,],[31,49,]),'RPAREN':([11,13,16,34,35,37,38,39,40,41,42,43,44,45,46,47,48,52,53,],[-22,-25,-26,53,-23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,58,-24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,32,61,],[2,51,62,]),'statement':([0,2,15,32,51,61,62,],[3,14,36,3,14,3,14,]),'expression':([0,2,4,8,10,12,15,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,49,51,59,61,62,],[5,5,15,32,34,35,5,37,38,39,40,41,42,43,44,45,46,47,48,50,5,52,55,5,61,5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','octave_parser.py',7),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multiple','octave_parser.py',11),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','octave_parser.py',15),
  ('statement -> IF expression statement END','statement',4,'p_statement_if','octave_parser.py',19),
  ('statement -> FOR ID EQUALS expression DOSPUNTOS expression statement_list END','statement',8,'p_statement_for','octave_parser.py',24),
  ('statement -> WHILE expression statement_list END','statement',4,'p_statement_while','octave_parser.py',30),
  ('statement -> DISP LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_disp','octave_parser.py',35),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','octave_parser.py',41),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','octave_parser.py',46),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','octave_parser.py',52),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','octave_parser.py',53),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','octave_parser.py',54),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','octave_parser.py',55),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','octave_parser.py',56),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','octave_parser.py',57),
  ('expression -> expression DOUBLE_EQUALS expression','expression',3,'p_expression_binop','octave_parser.py',58),
  ('expression -> expression GREATER_EQUALS expression','expression',3,'p_expression_binop','octave_parser.py',59),
  ('expression -> expression LESS_EQUALS expression','expression',3,'p_expression_binop','octave_parser.py',60),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','octave_parser.py',61),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','octave_parser.py',62),
  ('expression -> expression DOSPUNTOS expression','expression',3,'p_expression_binop','octave_parser.py',63),
  ('expression -> CADENA','expression',1,'p_expression_cadena','octave_parser.py',67),
  ('expression -> NOT expression','expression',2,'p_expression_not','octave_parser.py',71),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','octave_parser.py',75),
  ('expression -> NUMBER','expression',1,'p_expression_number','octave_parser.py',79),
  ('expression -> ID','expression',1,'p_expression_id','octave_parser.py',83),
]
