
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND BREAK CADENA COMMA DISP DIVIDE DOSPUNTOS DOUBLE_EQUALS DQUOTE END EQUALS FALSE FOR GREATER GREATER_EQUALS ID IF LESS LESS_EQUALS LPAREN MINUS NOT NULL NUMBER OR PLUS RPAREN SEMICOLON SQUOTE TIMES TRUE WHILEprogram : statement_liststatement_list : statement_list statementstatement_list : statementstatement : IF expression statement ENDstatement : FOR ID EQUALS expression DOSPUNTOS expression statement_list ENDstatement : WHILE expression statement_list ENDstatement : WHILE TRUE statement_list ENDstatement : DISP LPAREN expression RPAREN SEMICOLON\n                 | DISP LPAREN expression RPARENstatement : ID EQUALS expression SEMICOLON\n                 | ID EQUALS expressionstatement : expression SEMICOLON \n                 | expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GREATER expression\n                  | expression LESS expression\n                  | expression DOUBLE_EQUALS expression\n                  | expression GREATER_EQUALS expression\n                  | expression LESS_EQUALS expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression DOSPUNTOS expressionexpression : CADENAexpression : NOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID'
    
_lr_action_items = {'IF':([0,2,3,5,7,11,13,14,15,16,17,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,55,56,58,59,60,61,63,64,65,66,],[4,4,-3,-13,-30,-26,-29,-2,4,-30,-12,4,4,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-11,4,4,-28,-4,-10,-6,-7,-9,-8,4,4,-5,]),'FOR':([0,2,3,5,7,11,13,14,15,16,17,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,55,56,58,59,60,61,63,64,65,66,],[6,6,-3,-13,-30,-26,-29,-2,6,-30,-12,6,6,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-11,6,6,-28,-4,-10,-6,-7,-9,-8,6,6,-5,]),'WHILE':([0,2,3,5,7,11,13,14,15,16,17,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,55,56,58,59,60,61,63,64,65,66,],[8,8,-3,-13,-30,-26,-29,-2,8,-30,-12,8,8,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-11,8,8,-28,-4,-10,-6,-7,-9,-8,8,8,-5,]),'DISP':([0,2,3,5,7,11,13,14,15,16,17,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,55,56,58,59,60,61,63,64,65,66,],[9,9,-3,-13,-30,-26,-29,-2,9,-30,-12,9,9,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-11,9,9,-28,-4,-10,-6,-7,-9,-8,9,9,-5,]),'ID':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,],[7,7,-3,16,-13,30,-30,16,16,-26,16,-29,-2,7,-30,-12,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,16,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,16,-11,7,7,-28,-4,-10,-6,-7,-9,16,-8,7,7,-5,]),'CADENA':([0,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,],[11,11,-3,11,-13,-30,11,11,-26,11,-29,-2,11,-30,-12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,11,-11,11,11,-28,-4,-10,-6,-7,-9,11,-8,11,11,-5,]),'NOT':([0,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,],[12,12,-3,12,-13,-30,12,12,-26,12,-29,-2,12,-30,-12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,12,-11,12,12,-28,-4,-10,-6,-7,-9,12,-8,12,12,-5,]),'LPAREN':([0,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,],[10,10,-3,10,-13,-30,10,34,10,-26,10,-29,-2,10,-30,-12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,10,-11,10,10,-28,-4,-10,-6,-7,-9,10,-8,10,10,-5,]),'NUMBER':([0,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,],[13,13,-3,13,-13,-30,13,13,-26,13,-29,-2,13,-30,-12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,13,-11,13,13,-28,-4,-10,-6,-7,-9,13,-8,13,13,-5,]),'$end':([1,2,3,5,7,11,13,14,16,17,36,38,39,40,41,42,43,44,45,46,47,48,49,51,55,56,58,59,60,61,63,66,],[0,-1,-3,-13,-30,-26,-29,-2,-30,-12,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-11,-28,-4,-10,-6,-7,-9,-8,-5,]),'END':([3,5,7,11,13,14,16,17,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,55,56,58,59,60,61,63,65,66,],[-3,-13,-30,-26,-29,-2,-30,-12,-27,56,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-11,59,60,-28,-4,-10,-6,-7,-9,-8,66,-5,]),'SEMICOLON':([5,7,11,13,16,36,38,39,40,41,42,43,44,45,46,47,48,49,51,55,61,],[17,-30,-26,-29,-30,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,58,-28,63,]),'PLUS':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[18,-30,-26,-29,18,-30,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-28,18,18,]),'MINUS':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[19,-30,-26,-29,19,-30,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-28,19,19,]),'TIMES':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[20,-30,-26,-29,20,-30,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-28,20,20,]),'DIVIDE':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[21,-30,-26,-29,21,-30,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-28,21,21,]),'GREATER':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[22,-30,-26,-29,22,-30,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-28,22,22,]),'LESS':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[23,-30,-26,-29,23,-30,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-28,23,23,]),'DOUBLE_EQUALS':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[24,-30,-26,-29,24,-30,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-28,24,24,]),'GREATER_EQUALS':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[25,-30,-26,-29,25,-30,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-28,25,25,]),'LESS_EQUALS':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[26,-30,-26,-29,26,-30,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-28,26,26,]),'AND':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[27,-30,-26,-29,27,-30,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-28,27,27,]),'OR':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[28,-30,-26,-29,28,-30,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-28,28,28,]),'DOSPUNTOS':([5,7,11,13,15,16,32,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,54,55,57,64,],[29,-30,-26,-29,29,-30,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-28,62,29,]),'EQUALS':([7,30,],[31,50,]),'TRUE':([8,],[33,]),'RPAREN':([11,13,16,35,36,38,39,40,41,42,43,44,45,46,47,48,49,54,55,],[-26,-29,-30,55,-27,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,61,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,32,33,64,],[2,52,53,65,]),'statement':([0,2,15,32,33,52,53,64,65,],[3,14,37,3,3,14,14,3,14,]),'expression':([0,2,4,8,10,12,15,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,50,52,53,62,64,65,],[5,5,15,32,35,36,5,38,39,40,41,42,43,44,45,46,47,48,49,51,5,5,54,57,5,5,64,5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','octave_parser.py',26),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_multiple','octave_parser.py',37),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','octave_parser.py',41),
  ('statement -> IF expression statement END','statement',4,'p_statement_if','octave_parser.py',45),
  ('statement -> FOR ID EQUALS expression DOSPUNTOS expression statement_list END','statement',8,'p_statement_for','octave_parser.py',50),
  ('statement -> WHILE expression statement_list END','statement',4,'p_statement_while','octave_parser.py',59),
  ('statement -> WHILE TRUE statement_list END','statement',4,'p_statement_while_true','octave_parser.py',69),
  ('statement -> DISP LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_disp','octave_parser.py',74),
  ('statement -> DISP LPAREN expression RPAREN','statement',4,'p_statement_disp','octave_parser.py',75),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','octave_parser.py',81),
  ('statement -> ID EQUALS expression','statement',3,'p_statement_assign','octave_parser.py',82),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','octave_parser.py',87),
  ('statement -> expression','statement',1,'p_statement_expr','octave_parser.py',88),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','octave_parser.py',94),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','octave_parser.py',95),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','octave_parser.py',96),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','octave_parser.py',97),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','octave_parser.py',98),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','octave_parser.py',99),
  ('expression -> expression DOUBLE_EQUALS expression','expression',3,'p_expression_binop','octave_parser.py',100),
  ('expression -> expression GREATER_EQUALS expression','expression',3,'p_expression_binop','octave_parser.py',101),
  ('expression -> expression LESS_EQUALS expression','expression',3,'p_expression_binop','octave_parser.py',102),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','octave_parser.py',103),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','octave_parser.py',104),
  ('expression -> expression DOSPUNTOS expression','expression',3,'p_expression_binop','octave_parser.py',105),
  ('expression -> CADENA','expression',1,'p_expression_cadena','octave_parser.py',110),
  ('expression -> NOT expression','expression',2,'p_expression_not','octave_parser.py',115),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','octave_parser.py',120),
  ('expression -> NUMBER','expression',1,'p_expression_number','octave_parser.py',125),
  ('expression -> ID','expression',1,'p_expression_id','octave_parser.py',130),
]
